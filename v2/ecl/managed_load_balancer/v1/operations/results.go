/*
Generated by https://github.com/tamac-io/openapi-to-eclcloud-rb
*/
package operations

import (
	"github.com/nttcom/eclcloud/v2"
	"github.com/nttcom/eclcloud/v2/pagination"
)

type commonResult struct {
	eclcloud.Result
}

// ShowResult represents the result of a Show operation.
// Call its Extract method to interpret it as a Operation.
type ShowResult struct {
	commonResult
}

// ReservedFixedIPInResponse represents a reserved fixed ip in a operation.
type ReservedFixedIPInResponse struct {

	// - The IP address assign to this interface within subnet
	// - Do not use this IP address at the interface of other devices, allowed address pairs, etc
	IPAddress string `json:"ip_address"`
}

// MemberInResponse represents a member in a operation.
type MemberInResponse struct {

	// - IP address of the member (real server)
	IPAddress string `json:"ip_address"`

	// - Port number of the member (real server)
	Port int `json:"port"`

	// - Weight for the member (real server)
	// - Used when `policy.algorithm` is `"weighted-round-robin"` or `"weighted-least-connection"`
	Weight int `json:"weight"`
}

// ConditionInResponse represents a condition in a operation.
type ConditionInResponse struct {

	// - URL path patterns (regular expressions) of the condition
	PathPatterns []string `json:"path_patterns"`
}

// InterfaceInResponse represents a interface in a operation.
type InterfaceInResponse struct {

	// - ID of the network that this interface belongs to
	NetworkID string `json:"network_id"`

	// - Virtual IP address of the interface within subnet
	// - Do not use this IP address at the interface of other devices, allowed address pairs, etc
	VirtualIPAddress string `json:"virtual_ip_address"`

	// - IP addresses that are pre-reserved for applying configurations of load balancer to be performed without losing redundancy
	ReservedFixedIPs []ReservedFixedIPInResponse `json:"reserved_fixed_ips"`
}

// SyslogServerInResponse represents a syslog server in a operation.
type SyslogServerInResponse struct {

	// - IP address of the syslog server
	// - The load balancer sends ICMP to this IP address for health check purpose
	IPAddress string `json:"ip_address"`

	// - Port number of the syslog server
	Port int `json:"port"`

	// - Protocol of the syslog server
	Protocol string `json:"protocol"`
}

// TargetGroupConfigurationInResponse represents a target group configuration in a operation.
type TargetGroupConfigurationInResponse struct {

	// - Members (real servers) of the target group
	Members []MemberInResponse `json:"members,omitempty"`
}

// RuleConfigurationInResponse represents a rule configuration in a operation.
type RuleConfigurationInResponse struct {

	// - Priority of the rule
	Priority int `json:"priority,omitempty"`

	// - ID of the target group that assigned to the rule
	TargetGroupID string `json:"target_group_id,omitempty"`

	Conditions ConditionInResponse `json:"conditions"`
}

// RouteConfigurationInResponse represents a route configuration in a operation.
type RouteConfigurationInResponse struct {

	// - IP address of next hop for the (static) route
	NextHopIPAddress string `json:"next_hop_ip_address,omitempty"`
}

// PolicyConfigurationInResponse represents a policy configuration in a operation.
type PolicyConfigurationInResponse struct {

	// - Load balancing algorithm (method) of the policy
	Algorithm string `json:"algorithm,omitempty"`

	// - Persistence setting of the policy
	// - `"cookie"` is used when `listener.protocol` is `"http"` or `"https"`
	Persistence string `json:"persistence,omitempty"`

	// - URL of the sorry page to which accesses are redirected when all members in the target group are down
	// - Returns `""` when protocol is not `"http"` or `"https"`
	SorryPageUrl string `json:"sorry_page_url,omitempty"`

	// - Source NAT setting of the policy
	// - When `source_nat` is `"enable"` and `listener.protocol` is `"http"` or `"https"` ,
	//   - The source IP address of the request is replaced with `virtual_ip_address` which is assigned to the interface from which the request was sent
	//   - `X-Forwarded-For` header with the IP address of the client is added
	SourceNat string `json:"source_nat,omitempty"`

	// - ID of the certificate that assigned to the policy
	// - Returns `""` when protocol is not `"https"`
	CertificateID string `json:"certificate_id,omitempty"`

	// - ID of the health monitor that assigned to the policy
	HealthMonitorID string `json:"health_monitor_id,omitempty"`

	// - ID of the listener that assigned to the policy
	ListenerID string `json:"listener_id,omitempty"`

	// - ID of the default target group that assigned to the policy
	DefaultTargetGroupID string `json:"default_target_group_id,omitempty"`

	// - ID of the TLS policy that assigned to the policy
	// - Returns `""` when protocol is not `"https"`
	TlsPolicyID string `json:"tls_policy_id,omitempty"`
}

// ListenerConfigurationInResponse represents a listener configuration in a operation.
type ListenerConfigurationInResponse struct {

	// - IP address of the listener for listening
	IPAddress string `json:"ip_address,omitempty"`

	// - Port number of the listener for listening
	Port int `json:"port,omitempty"`

	// - Protocol of the listener for listening
	Protocol string `json:"protocol,omitempty"`
}

// HealthMonitorConfigurationInResponse represents a health monitor configuration in a operation.
type HealthMonitorConfigurationInResponse struct {

	// - Port number of the health monitor for healthchecking
	// - Returns `0` when `protocol` is `"icmp"`
	Port int `json:"port,omitempty"`

	// - Protocol of the health monitor for healthchecking
	Protocol string `json:"protocol,omitempty"`

	// - Interval of healthchecking (in seconds)
	Interval int `json:"interval,omitempty"`

	// - Retry count of healthchecking
	// - Initial monitoring is not included
	// - Retry is executed at the interval specified by `interval`
	Retry int `json:"retry,omitempty"`

	// - Timeout of healthchecking (in seconds)
	Timeout int `json:"timeout,omitempty"`

	// - URL path of healthchecking
	// - Used when `protocol` is `"http"` or `"https"`
	Path string `json:"path,omitempty"`

	// - HTTP status codes expected in healthchecking
	// - Used when `protocol` is `"http"` or `"https"`
	// - Format: `"xxx"` or `"xxx-xxx"` ( `xxx` between [100, 599])
	HttpStatusCode string `json:"http_status_code,omitempty"`
}

// LoadBalancerConfigurationInResponse represents a load balancer configuration in a operation.
type LoadBalancerConfigurationInResponse struct {

	// - Syslog servers to which access logs are transferred
	// - Only access logs to listeners which `protocol` is either `"http"` or `"https"` are transferred
	//   - When `protocol` of `syslog_servers` is `"tcp"`
	//     - Access logs are transferred to all healthy syslog servers specified in `syslog_servers`
	//   - When `protocol` of `syslog_servers` is `"udp"`
	//     - Access logs are transferred to the syslog server specified first in `syslog_servers` as long as it is healthy
	//     - Access logs are transferred to the syslog server specified second (last) in `syslog_servers` when the first syslog server is not healthy
	SyslogServers []SyslogServerInResponse `json:"syslog_servers,omitempty"`

	// - Interfaces that attached to the load balancer
	Interfaces []InterfaceInResponse `json:"interfaces,omitempty"`
}

// TargetGroupInResponse represents a target group in a operation.
type TargetGroupInResponse struct {

	// - ID of the target group
	ID string `json:"id"`

	// - Configuration status of the target group before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current TargetGroupConfigurationInResponse `json:"current"`

	Staged TargetGroupConfigurationInResponse `json:"staged"`
}

// RuleInResponse represents a rule in a operation.
type RuleInResponse struct {

	// - ID of the rule
	ID string `json:"id"`

	// - Configuration status of the rule before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current RuleConfigurationInResponse `json:"current"`

	Staged RuleConfigurationInResponse `json:"staged"`
}

// RouteInResponse represents a route in a operation.
type RouteInResponse struct {

	// - ID of the route
	ID string `json:"id"`

	// - Configuration status of the route before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current RouteConfigurationInResponse `json:"current"`

	Staged RouteConfigurationInResponse `json:"staged"`
}

// PolicyInResponse represents a policy in a operation.
type PolicyInResponse struct {

	// - ID of the policy
	ID string `json:"id"`

	// - Configuration status of the policy before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current PolicyConfigurationInResponse `json:"current"`

	Staged PolicyConfigurationInResponse `json:"staged"`
}

// ListenerInResponse represents a listener in a operation.
type ListenerInResponse struct {

	// - ID of the listener
	ID string `json:"id"`

	// - Configuration status of the listener before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current ListenerConfigurationInResponse `json:"current"`

	Staged ListenerConfigurationInResponse `json:"staged"`
}

// HealthMonitorInResponse represents a health monitor in a operation.
type HealthMonitorInResponse struct {

	// - ID of the health monitor
	ID string `json:"id"`

	// - Configuration status of the health monitor before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current HealthMonitorConfigurationInResponse `json:"current"`

	Staged HealthMonitorConfigurationInResponse `json:"staged"`
}

// LoadBalancerInResponse represents a load balancer in a operation.
type LoadBalancerInResponse struct {

	// - ID of the load balancer
	ID string `json:"id"`

	// - Configuration status of the load balancer before the operation
	ConfigurationStatus string `json:"configuration_status"`

	Current LoadBalancerConfigurationInResponse `json:"current"`

	Staged LoadBalancerConfigurationInResponse `json:"staged"`
}

// ReCreateInResponse represents a re-create in a operation.
type ReCreateInResponse struct {

	// - ID of the version
	VersionID string `json:"version_id"`
}

// SystemUpdateInResponse represents a system-update in a operation.
type SystemUpdateInResponse struct {

	// - ID of the system update that has been applied to the load balancer
	SystemUpdateID string `json:"system_update_id"`

	// - Execution type of system update who has been applied to the load balancer
	ExecutionType string `json:"execution_type"`
}

// ApplyConfigurationInResponse represents a apply-configuration in a operation.
type ApplyConfigurationInResponse struct {

	// - The changed load balancer
	LoadBalancer LoadBalancerInResponse `json:"load_balancer"`

	// - Added, changed or deleted health monitors
	HealthMonitors []HealthMonitorInResponse `json:"health_monitors"`

	// - Added, changed or deleted listeners
	Listeners []ListenerInResponse `json:"listeners"`

	// - Added, changed or deleted policies
	Policies []PolicyInResponse `json:"policies"`

	// - Added, changed or deleted routes
	Routes []RouteInResponse `json:"routes"`

	// - Added, changed or deleted rules
	Rules []RuleInResponse `json:"rules"`

	// - Added, changed or deleted target groups
	TargetGroups []TargetGroupInResponse `json:"target_groups"`
}

// RequestBodyInResponse represents a request body in a operation.
type RequestBodyInResponse struct {

	// - Added or changed configurations of the load balancer and related resources has been applied
	ApplyConfigurations ApplyConfigurationInResponse `json:"apply-configurations"`

	SystemUpdate SystemUpdateInResponse `json:"system-update"`

	// - Added or changed configurations of the load balancer and related resources has been cancelled
	// - Always returns `null`
	CancelConfigurations *interface{} `json:"cancel-configurations,omitempty"`

	// - Virtual servers of the load balancer has been re-deployed by operators of NTT Communications
	ReCreate ReCreateInResponse `json:"re-create"`
}

// Operation represents a operation.
type Operation struct {

	// - ID of the operation
	ID string `json:"id"`

	// - ID of the resource
	ResourceID string `json:"resource_id"`

	// - Type of the resource
	ResourceType string `json:"resource_type"`

	// - The unique hyphenated UUID to identify the request
	//   - The UUID which has been set by X-MVNA-Request-Id in request headers
	RequestID string `json:"request_id"`

	// - Types of the request
	RequestTypes []string `json:"request_types"`

	RequestBody RequestBodyInResponse `json:"request_body"`

	// - Operation status of the resource
	Status string `json:"status"`

	// - The time when operation has been started by API execution
	// - Format: `"%Y-%m-%d %H:%M:%S"` (UTC)
	ReceptionDatetime string `json:"reception_datetime"`

	// - The time when operation has been finished
	// - Format: `"%Y-%m-%d %H:%M:%S"` (UTC)
	CommitDatetime string `json:"commit_datetime"`

	// - The warning message of operation that has been stopped or failed
	Warning string `json:"warning"`

	// - The error message of operation that has been stopped or failed
	Error string `json:"error"`

	// - ID of the owner tenant of the resource
	TenantID string `json:"tenant_id"`
}

// ExtractInto interprets any commonResult as a operation, if possible.
func (r commonResult) ExtractInto(v interface{}) error {
	return r.Result.ExtractIntoStructPtr(v, "operation")
}

// Extract is a function that accepts a result and extracts a Operation resource.
func (r commonResult) Extract() (*Operation, error) {
	var operation Operation

	err := r.ExtractInto(&operation)

	return &operation, err
}

// OperationPage is the page returned by a pager when traversing over a collection of operation.
type OperationPage struct {
	pagination.LinkedPageBase
}

// IsEmpty checks whether a OperationPage struct is empty.
func (r OperationPage) IsEmpty() (bool, error) {
	is, err := ExtractOperations(r)

	return len(is) == 0, err
}

// ExtractOperationsInto interprets the results of a single page from a List() call, producing a slice of operation entities.
func ExtractOperationsInto(r pagination.Page, v interface{}) error {
	return r.(OperationPage).Result.ExtractIntoSlicePtr(v, "operations")
}

// ExtractOperations accepts a Page struct, specifically a NetworkPage struct, and extracts the elements into a slice of Operation structs.
// In other words, a generic collection is mapped into a relevant slice.
func ExtractOperations(r pagination.Page) ([]Operation, error) {
	var s []Operation

	err := ExtractOperationsInto(r, &s)

	return s, err
}
